{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "import tkinter.messagebox\n",
    "from tkinter import ttk\n",
    "import pymysql\n",
    "import pandas as pd \n",
    "import json\n",
    "import datetime\n",
    "import numpy as np\n",
    "class DateEncoder(json.JSONEncoder):\n",
    "    def default(self, obj):\n",
    "        if isinstance(obj,datetime.datetime):\n",
    "            return obj.strftime(\"%Y-%m-%d %H:%M:%S\")\n",
    "        else:\n",
    "            return json.JSONEncoder.default(self,obj)\n",
    "#显示所有列\n",
    "pd.set_option('display.max_columns', None)\n",
    "#显示所有行\n",
    "pd.set_option('display.max_rows',None)\n",
    "\n",
    "#第1步，实例化object,建立窗口window\n",
    "window = tk.Tk()\n",
    "\n",
    "#第3步，设定窗口的大小（长 * 宽）\n",
    "window.geometry('550x200')\n",
    "#窗口标题\n",
    "window.title(\"数据查询系统\")\n",
    "tk.Label(window,text='欢迎使用科大讯飞查询系统',font=('Arial',16)).pack()\n",
    "\n",
    "#第5步，用户信息\n",
    "tk.Label(window,text='学校信息:',font=('Arial',14)).place(x=10,y=100)\n",
    "tk.Label(window,text='用户信息:',font=('Arial',14)).place(x=10,y=65)\n",
    "tk.Label(window,text='班级信息:',font=('Arial',14)).place(x=10,y=135)\n",
    "#查询信息\n",
    "var_selecte_message = tk.StringVar()\n",
    "entry_selecte_message = tk.Entry(window, textvariable=var_selecte_message,font=('Arial',14))\n",
    "var_selecte_message.set('login_name/user_name')\n",
    "entry_selecte_message.place(x=100,y=65)\n",
    "var_school_message = tk.StringVar()\n",
    "entry_school_message = tk.Entry(window, textvariable=var_school_message,font=('Arial',14))\n",
    "var_school_message.set('school_name/school_id')\n",
    "entry_school_message.place(x=100,y=100)\n",
    "var_class_message = tk.StringVar()\n",
    "entry_class_message = tk.Entry(window, textvariable=var_class_message,font=('Arial',14))\n",
    "var_class_message.set('class_name/class_id')\n",
    "entry_class_message.place(x=100,y=135)\n",
    "def id_selectebox():\n",
    "    root_id=tk.Toplevel()\n",
    "    root_id.geometry('500x400')\n",
    "    root_id.title(\"身份信息查询结果\")\n",
    "    text_id =tk.Text(root_id)  # 多行文本显示\n",
    "    text_id.place(x=10, y=15, relwidth=0.93, relheight=0.9)\n",
    "    scroll_id = tkinter.Scrollbar(root_id)\n",
    "    scroll_id.pack(side=tkinter.RIGHT,fill=tkinter.Y)\n",
    "    scroll_id.config(command=text_id.yview)\n",
    "    text_id.config(yscrollcommand=scroll_id.set)\n",
    "    selecte_login(text_id)\n",
    "def selecte_login(text_id):\n",
    "    text_id.delete('1.0','end')\n",
    "    selecte_message = var_selecte_message.get()\n",
    "    conn = pymysql.connect(user='iflyreadonly', passwd='5pLhorZKGY0z_vV',port=23306,\n",
    "                       host='172.31.195.180', db='user_center')\n",
    "    if isinstance(selecte_message, str):\n",
    "        selecte_message=\"'{}'\".format(selecte_message)\n",
    "    sql_select_user =\"select id,login_name,user_name,birth_date,app_name,creator,create_time,modificator,update_time,user_photo from uc_user where login_name ={}\".format(selecte_message)+\"or user_name={}\".format(selecte_message)\n",
    "    #tkinter.messagebox.showerror(message='你查询的信息为空')\n",
    "    df_user=pd.read_sql(sql_select_user,conn)\n",
    "    if df_user.empty:\n",
    "        #tkinter.messagebox.showerror(message='查询系统无此身份信息')\n",
    "        text_id.insert('insert', '查询系统无此身份信息')\n",
    "    m=0\n",
    "    for i in df_user.index:\n",
    "        m = m + 1\n",
    "        data = df_user[df_user.index==i]\n",
    "        user_id = df_user.loc[i,'id']       \n",
    "        data=data.dropna(axis=1,how='all')\n",
    "        data=data.to_dict(orient='records')\n",
    "        data={'用户 ==>>':data}\n",
    "        sql_select_user_organization =\"select * from uc_user_organization where user_id ={}\".format(user_id)\n",
    "        df_organization = pd.read_sql(sql_select_user_organization,conn)\n",
    "        df_organization = df_organization.drop_duplicates(subset=['user_id'],keep='first')\n",
    "        df_organization = df_organization.drop('user_id',axis = 1)\n",
    "        data1=data\n",
    "        if df_organization.empty:\n",
    "            data1=data\n",
    "        else:\n",
    "            role_id = df_organization.loc[0,'role_id']\n",
    "            df_organization=df_organization.dropna(axis=1,how='all')\n",
    "            df_or=df_organization.to_dict()\n",
    "            for i in ['country_id','province_id','city_id','district_id']:\n",
    "                p = df_organization.loc[0,i]\n",
    "                sql_select_area = \"select id,area_code,area_name,type from uc_area where id={}\".format(p)\n",
    "                area = pd.read_sql(sql_select_area,conn)\n",
    "                area=area.to_dict(orient='records')\n",
    "                df_or[i]=area\n",
    "            sql_select_role =\"select role_name,en_name from uc_role where id ={}\".format(role_id)\n",
    "            df_role=pd.read_sql(sql_select_role,conn)\n",
    "            df_role=df_role.drop_duplicates(subset=['role_name'],keep='first')\n",
    "            if df_role.empty:\n",
    "                print('uc_role列表无')\n",
    "            else:\n",
    "                role_name = df_role.loc[0,'role_name']\n",
    "                df_role = df_role.dropna(axis=1,how='all')\n",
    "                if role_name == '学生':\n",
    "                    sql_select_student_id =\"select student_id from uc_user_student where user_id ={}\".format(user_id)\n",
    "                    df_student = pd.read_sql(sql_select_student_id,conn)\n",
    "                    df_student = df_student.drop_duplicates(subset=['student_id'],keep='first')\n",
    "                    col_name = df_role.columns.tolist()\n",
    "                    col_name.insert(col_name.index('role_name')+1,'student_id')\n",
    "                    df_role = df_role.reindex(columns=col_name)\n",
    "                    df_role.loc[0,'student_id']=df_student.loc[0,'student_id']\n",
    "                    df_role = df_role.dropna(axis=1,how='all')\n",
    "                df_role = df_role.to_dict(orient='records')\n",
    "                df_role = {'角色信息 ==>>':df_role}\n",
    "                df_or['role_id']=df_role\n",
    "            school_id = df_organization.loc[0,'school_id']\n",
    "            sql_school = \"SELECT * FROM uc_org_school WHERE  id = {} \".format(school_id)\n",
    "            df_school = pd.read_sql(sql_school,conn)\n",
    "            df_school = df_school.drop_duplicates(subset=['id'],keep='first')\n",
    "            df_school = df_school.dropna(axis=1,how='all')\n",
    "            if df_school.empty:\n",
    "                print('查无此学校信息')\n",
    "            else:\n",
    "                df_school = df_school.to_dict(orient='records')\n",
    "                df_school = {'学校信息 ==>>':df_school}\n",
    "                df_or['school_id']=df_school\n",
    "            df_or={'组织信息 ==>>':df_or}\n",
    "            data1.update(df_or)\n",
    "        sql_select_manager=\"select * from uc_user_manager where user_id={}\".format(user_id)\n",
    "        df_manager = pd.read_sql(sql_select_manager,conn)\n",
    "        df_manager=df_manager.drop_duplicates(subset=['user_id','location_id'],keep='first')\n",
    "        if df_manager.empty:\n",
    "            print('uc_user_manager无')\n",
    "        else:\n",
    "            df_manager=df_manager.dropna(axis=1,how='all')\n",
    "            df_manager=df_manager.to_dict(orient='records')\n",
    "            df_manager={'管理信息 ==>>':df_manager}\n",
    "            data1.update(df_manager)\n",
    "        js = json.dumps(data1,cls=DateEncoder,indent=1,ensure_ascii=False)\n",
    "        text_id.insert('insert','第{}个用户'.format(m))\n",
    "        text_id.insert('insert', js)\n",
    "    conn.close()\n",
    "    return 0\n",
    "def school_selectebox():\n",
    "    root_school=tk.Toplevel()\n",
    "    root_school.geometry('500x400')\n",
    "    root_school.title(\"学校信息查询结果\")\n",
    "    text_school =tk.Text(root_school)  # 多行文本显示\n",
    "    text_school.place(x=10, y=15, relwidth=0.93, relheight=0.9)\n",
    "    scroll_school = tkinter.Scrollbar(root_school)\n",
    "    scroll_school.pack(side=tkinter.RIGHT,fill=tkinter.Y)\n",
    "    scroll_school.config(command=text_school.yview)\n",
    "    text_school.config(yscrollcommand=scroll_school.set)\n",
    "    school_login(text_school)\n",
    "def school_login(text_school):\n",
    "    text_school.delete('1.0','end')\n",
    "    school_message = var_school_message.get()\n",
    "    conn = pymysql.connect(user='iflyreadonly', passwd='5pLhorZKGY0z_vV',port=23306,\n",
    "                       host='172.31.195.180', db='user_center')\n",
    "    if isinstance(school_message, str):\n",
    "        school_message1=\"'{}'\".format(school_message)\n",
    "    else:\n",
    "        school_message1=school_message\n",
    "    sql_school = \"SELECT * FROM uc_org_school WHERE  id = {} \".format(school_message1)+\"or school_name like '%%%%%s%%%%'\"%school_message\n",
    "    df_school = pd.read_sql(sql_school,conn)\n",
    "    if df_school.empty:\n",
    "        #tkinter.messagebox.showerror(message='查询系统无此学校信息')\n",
    "        text_school.insert('insert', '查询系统无此学校信息')\n",
    "    n=0\n",
    "    for i in df_school.index:\n",
    "        n = n + 1\n",
    "        data = df_school[df_school.index==i]      \n",
    "        #data = data.applymap(lambda x: np.NaN if str(x).isspace() else x)\n",
    "        data=data.dropna(axis=1,how='all')\n",
    "        data=data.to_dict(orient='records')\n",
    "        data={'学校信息 ==>>':data}\n",
    "        js1 = json.dumps(data,cls=DateEncoder,indent=1,ensure_ascii=False)\n",
    "        text_school.insert('insert','第{}个学校'.format(n))\n",
    "        text_school.insert('insert', js1)\n",
    "    conn.close()\n",
    "    return 0\n",
    "def class_selectebox():\n",
    "    root_class=tk.Toplevel()\n",
    "    root_class.geometry('500x400')\n",
    "    root_class.title(\"班级信息查询结果\")\n",
    "    text_class =tk.Text(root_class)  # 多行文本显示\n",
    "    text_class.place(x=10, y=15, relwidth=0.93, relheight=0.9)\n",
    "    scroll_class = tkinter.Scrollbar(root_class)\n",
    "    scroll_class.pack(side=tkinter.RIGHT,fill=tkinter.Y)\n",
    "    scroll_class.config(command=text_class.yview)\n",
    "    text_class.config(yscrollcommand=scroll_class.set)\n",
    "    class_login(text_class)\n",
    "def class_login(text_class):\n",
    "    text_class.delete('1.0','end')\n",
    "    class_message = var_class_message.get()\n",
    "    conn = pymysql.connect(user='iflyreadonly', passwd='5pLhorZKGY0z_vV',port=23306,\n",
    "                       host='172.31.195.180', db='user_center')\n",
    "    if isinstance(class_message, str):\n",
    "        class_message1=\"'{}'\".format(class_message)\n",
    "    else:\n",
    "        class_message1=class_message\n",
    "    sql_class = \"SELECT * FROM uc_org_class WHERE  id = {} \".format(class_message1)+\"or class_name like '%%{}%%'\".format(class_message)\n",
    "    df_class = pd.read_sql(sql_class,conn)\n",
    "    if df_class.empty:\n",
    "        #tkinter.messagebox.showerror(message='查询系统无此班级信息')\n",
    "        text_class.insert('insert', '查询系统无此班级信息')\n",
    "    n=0\n",
    "    for i in df_class.index:\n",
    "        n = n + 1\n",
    "        data = df_class[df_class.index==i]      \n",
    "        school_id = df_class.loc[i,'school_id']\n",
    "        data=data.dropna(axis=1,how='all')\n",
    "        data=data.to_dict(orient='records')\n",
    "        data={'班级 ==>>':data}\n",
    "        sql_school = \"SELECT * FROM uc_org_school WHERE  id = {} \".format(school_id)\n",
    "        df_school = pd.read_sql(sql_school,conn)\n",
    "        df_school = df_school.drop_duplicates(subset=['id'],keep='first')\n",
    "        df_school = df_school.dropna(axis=1,how='all')\n",
    "        data1=data\n",
    "        if df_school.empty:\n",
    "            print('查无此班级的学校信息')\n",
    "        else:\n",
    "            df_school = df_school.to_dict(orient='records')\n",
    "            df_school = {'学校 ==>>':df_school}\n",
    "            data1.update(df_school)\n",
    "        js1 = json.dumps(data,cls=DateEncoder,indent=1,ensure_ascii=False)\n",
    "        text_class.insert('insert','第{}个班级'.format(n))\n",
    "        text_class.insert('insert', js1)\n",
    "    conn.close()\n",
    "    return 0\n",
    "#login and sign up 按钮\n",
    "select_button = tk.Button(window,text='身份查询',command=id_selectebox).place(x=380,y=65)\n",
    "school_button = tk.Button(window,text='学校查询',command=school_selectebox).place(x=380,y=100)\n",
    "class_button = tk.Button(window,text='班级查询',command=class_selectebox).place(x=380,y=135)\n",
    "#主窗口循环显示\n",
    "window.mainloop()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
